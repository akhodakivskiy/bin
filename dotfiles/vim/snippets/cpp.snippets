# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
#ifndef guard
snippet ifndef
	#ifndef ${1:`Filename('', '')`}_H
	#define $1_H

	#endif
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet pimpldef
	class ${1:`Filename('$1_t', 'name')`}Private {
		public:
			$1Private($1 *owner);
			~$1Private();

		private:
			$1 *m_Owner;
	};

	$1Private::$1Private($1 *owner)
		: m_Owner(owner)
	{
	}

	$1Private::~$1Private()
	{
	}

	$1::$1()
	: d(new $1Private(this))
	{
	}

	$1::~$1()
	{
		delete d;
	}
snippet pimpldec
	class ${1:`Filename('$1_t', 'name')`}Private;

	class $1 {
		public:
			$1(${2:arguments});
			~$1();
		private:
			$1Private *d;	
	};
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();

	private:
		${3:/* data */}
	};
snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}
